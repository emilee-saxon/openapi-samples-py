{
    "chunks": [
        {
            "type": "txt",
            "chunk_number": 1,
            "lines": [
                {
                    "line_number": 1,
                    "text": "/*jslint browser: true, for: true, long: true, unordered: true */"
                },
                {
                    "line_number": 2,
                    "text": "/*global window console demonstrationHelper */"
                },
                {
                    "line_number": 3,
                    "text": ""
                },
                {
                    "line_number": 4,
                    "text": "(function () {"
                },
                {
                    "line_number": 5,
                    "text": "// Create a helper function to remove some boilerplate code from the example itself."
                },
                {
                    "line_number": 6,
                    "text": "const demo = demonstrationHelper({"
                },
                {
                    "line_number": 7,
                    "text": "\"responseElm\": document.getElementById(\"idResponse\"),"
                },
                {
                    "line_number": 8,
                    "text": "\"javaScriptElm\": document.getElementById(\"idJavaScript\"),"
                },
                {
                    "line_number": 9,
                    "text": "\"accessTokenElm\": document.getElementById(\"idBearerToken\"),"
                },
                {
                    "line_number": 10,
                    "text": "\"retrieveTokenHref\": document.getElementById(\"idHrefRetrieveToken\"),"
                },
                {
                    "line_number": 11,
                    "text": "\"tokenValidateButton\": document.getElementById(\"idBtnValidate\"),"
                },
                {
                    "line_number": 12,
                    "text": "\"accountsList\": document.getElementById(\"idCbxAccount\"),"
                },
                {
                    "line_number": 13,
                    "text": "\"footerElm\": document.getElementById(\"idFooter\")"
                },
                {
                    "line_number": 14,
                    "text": "});"
                },
                {
                    "line_number": 15,
                    "text": "const fictivePrice = 1;  // SIM doesn't allow calls to price endpoint for most instruments"
                },
                {
                    "line_number": 16,
                    "text": "let lastOrderId = \"0\";"
                },
                {
                    "line_number": 17,
                    "text": ""
                },
                {
                    "line_number": 18,
                    "text": "/**"
                },
                {
                    "line_number": 19,
                    "text": "* Helper function to convert the json string to an object, with error handling."
                },
                {
                    "line_number": 20,
                    "text": "* @return {Object} The newOrderObject from the input field - null if invalid"
                },
                {
                    "line_number": 21,
                    "text": "*/"
                },
                {
                    "line_number": 22,
                    "text": "function getOrderObjectFromJson() {"
                },
                {
                    "line_number": 23,
                    "text": "let newOrderObject = null;"
                },
                {
                    "line_number": 24,
                    "text": "try {"
                },
                {
                    "line_number": 25,
                    "text": "newOrderObject = JSON.parse(document.getElementById(\"idNewOrderObject\").value);"
                },
                {
                    "line_number": 26,
                    "text": "if (newOrderObject.hasOwnProperty(\"AccountKey\")) {"
                },
                {
                    "line_number": 27,
                    "text": "// This is the case for single orders, or conditional/related orders"
                },
                {
                    "line_number": 28,
                    "text": "// This function is used for other order types as well, so more order types are considered"
                },
                {
                    "line_number": 29,
                    "text": "newOrderObject.AccountKey = demo.user.accountKey;"
                },
                {
                    "line_number": 30,
                    "text": "}"
                },
                {
                    "line_number": 31,
                    "text": "if (newOrderObject.hasOwnProperty(\"Orders\")) {"
                },
                {
                    "line_number": 32,
                    "text": "// This is the case for OCO, related and conditional orders"
                },
                {
                    "line_number": 33,
                    "text": "newOrderObject.Orders.forEach(function (order) {"
                },
                {
                    "line_number": 34,
                    "text": "if (order.hasOwnProperty(\"AccountKey\")) {"
                },
                {
                    "line_number": 35,
                    "text": "order.AccountKey = demo.user.accountKey;"
                },
                {
                    "line_number": 36,
                    "text": "}"
                },
                {
                    "line_number": 37,
                    "text": "});"
                },
                {
                    "line_number": 38,
                    "text": "}"
                },
                {
                    "line_number": 39,
                    "text": "document.getElementById(\"idNewOrderObject\").value = JSON.stringify(newOrderObject, null, 4);"
                },
                {
                    "line_number": 40,
                    "text": "} catch (e) {"
                },
                {
                    "line_number": 41,
                    "text": "console.error(e);"
                },
                {
                    "line_number": 42,
                    "text": "}"
                },
                {
                    "line_number": 43,
                    "text": "return newOrderObject;"
                },
                {
                    "line_number": 44,
                    "text": "}"
                },
                {
                    "line_number": 45,
                    "text": ""
                },
                {
                    "line_number": 46,
                    "text": "/**"
                },
                {
                    "line_number": 47,
                    "text": "* Modify the order object so the elements comply to the order type."
                },
                {
                    "line_number": 48,
                    "text": "* @return {void}"
                },
                {
                    "line_number": 49,
                    "text": "*/"
                },
                {
                    "line_number": 50,
                    "text": "function changeOrderType() {"
                },
                {
                    "line_number": 51,
                    "text": "const newOrderObject = getOrderObjectFromJson();"
                },
                {
                    "line_number": 52,
                    "text": "newOrderObject.OrderType = document.getElementById(\"idCbxOrderType\").value;"
                },
                {
                    "line_number": 53,
                    "text": "delete newOrderObject.OrderPrice;"
                },
                {
                    "line_number": 54,
                    "text": "delete newOrderObject.StopLimitPrice;"
                },
                {
                    "line_number": 55,
                    "text": "delete newOrderObject.TrailingstopDistanceToMarket;"
                },
                {
                    "line_number": 56,
                    "text": "delete newOrderObject.TrailingStopStep;"
                },
                {
                    "line_number": 57,
                    "text": "switch (newOrderObject.OrderType) {"
                },
                {
                    "line_number": 58,
                    "text": "case \"Limit\":  // A buy order will be executed when the price falls below the provided price point; a sell order when the price increases beyond the provided price point."
                },
                {
                    "line_number": 59,
                    "text": "fetch("
                },
                {
                    "line_number": 60,
                    "text": "demo.apiUrl + \"/trade/v1/infoprices?AssetType=\" + newOrderObject.AssetType + \"&uic=\" + newOrderObject.Uic + \"&FieldGroups=\" + encodeURIComponent(\"DisplayAndFormat,Quote\"),"
                },
                {
                    "line_number": 61,
                    "text": "{"
                },
                {
                    "line_number": 62,
                    "text": "\"method\": \"GET\","
                },
                {
                    "line_number": 63,
                    "text": "\"headers\": {"
                },
                {
                    "line_number": 64,
                    "text": "\"Authorization\": \"Bearer \" + document.getElementById(\"idBearerToken\").value"
                },
                {
                    "line_number": 65,
                    "text": "}"
                },
                {
                    "line_number": 66,
                    "text": "}"
                },
                {
                    "line_number": 67,
                    "text": ").then(function (response) {"
                },
                {
                    "line_number": 68,
                    "text": "if (response.ok) {"
                },
                {
                    "line_number": 69,
                    "text": "response.json().then(function (responseJson) {"
                },
                {
                    "line_number": 70,
                    "text": "if (responseJson.Quote.PriceTypeBid === \"NoAccess\") {"
                },
                {
                    "line_number": 71,
                    "text": "newOrderObject.OrderPrice = fictivePrice;  // SIM doesn't supply prices for most instruments (only FxSpot)"
                },
                {
                    "line_number": 72,
                    "text": "console.error(\"Price not available, so using fictive price (only for testing).\");"
                },
                {
                    "line_number": 73,
                    "text": "} else {"
                },
                {
                    "line_number": 74,
                    "text": "newOrderObject.OrderPrice = responseJson.Quote.Bid;"
                },
                {
                    "line_number": 75,
                    "text": "}"
                },
                {
                    "line_number": 76,
                    "text": "document.getElementById(\"idNewOrderObject\").value = JSON.stringify(newOrderObject, null, 4);"
                },
                {
                    "line_number": 77,
                    "text": "console.log(\"Result of price request due to switch to 'Limit':\\n\" + JSON.stringify(responseJson, null, 4));"
                },
                {
                    "line_number": 78,
                    "text": "});"
                },
                {
                    "line_number": 79,
                    "text": "} else {"
                },
                {
                    "line_number": 80,
                    "text": "demo.processError(response);"
                },
                {
                    "line_number": 81,
                    "text": "}"
                },
                {
                    "line_number": 82,
                    "text": "}).catch(function (error) {"
                },
                {
                    "line_number": 83,
                    "text": "console.error(error);"
                },
                {
                    "line_number": 84,
                    "text": "});"
                },
                {
                    "line_number": 85,
                    "text": "break;"
                },
                {
                    "line_number": 86,
                    "text": "case \"Market\":  // Order is attempted filled at best price in the market."
                },
                {
                    "line_number": 87,
                    "text": "document.getElementById(\"idNewOrderObject\").value = JSON.stringify(newOrderObject, null, 4);"
                },
                {
                    "line_number": 88,
                    "text": "break;"
                },
                {
                    "line_number": 89,
                    "text": "case \"StopIfBid\":  // A buy order will be executed when the bid price increases to the provided price point; a sell order when the price falls below."
                },
                {
                    "line_number": 90,
                    "text": "case \"StopIfOffered\":  // A buy order will be executed when the ask price increases to the provided price point; a sell order when the price falls below."
                },
                {
                    "line_number": 91,
                    "text": "case \"StopIfTraded\":  // A buy order will be executed when the last price increases to the provided price point; a sell order when the price falls below."
                },
                {
                    "line_number": 92,
                    "text": "newOrderObject.OrderPrice = fictivePrice;"
                },
                {
                    "line_number": 93,
                    "text": "document.getElementById(\"idNewOrderObject\").value = JSON.stringify(newOrderObject, null, 4);"
                },
                {
                    "line_number": 94,
                    "text": "break;"
                },
                {
                    "line_number": 95,
                    "text": "case \"StopLimit\":  // A buy StopLimit order will turn in to a regular limit order once the price goes beyond the OrderPrice. The limit order will have a OrderPrice of the StopLimitPrice."
                },
                {
                    "line_number": 96,
                    "text": "newOrderObject.OrderPrice = fictivePrice;"
                },
                {
                    "line_number": 97,
                    "text": "newOrderObject.StopLimitPrice = fictivePrice + 1;  // Some other fictivePrice"
                },
                {
                    "line_number": 98,
                    "text": "document.getElementById(\"idNewOrderObject\").value = JSON.stringify(newOrderObject, null, 4);"
                },
                {
                    "line_number": 99,
                    "text": "break;"
                },
                {
                    "line_number": 100,
                    "text": "case \"TrailingStop\":  // A trailing stop order type is used to guard a position against a potential loss, but the order price follows that of the position when the price goes up. It does so in steps, trying to keep a fixed distance to the current price."
                },
                {
                    "line_number": 101,
                    "text": "case \"TrailingStopIfBid\":"
                },
                {
                    "line_number": 102,
                    "text": "case \"TrailingStopIfOffered\":"
                },
                {
                    "line_number": 103,
                    "text": "case \"TrailingStopIfTraded\":"
                },
                {
                    "line_number": 104,
                    "text": "newOrderObject.OrderPrice = fictivePrice;"
                },
                {
                    "line_number": 105,
                    "text": "newOrderObject.TrailingstopDistanceToMarket = 1;"
                },
                {
                    "line_number": 106,
                    "text": "newOrderObject.TrailingStopStep = 0.1;"
                },
                {
                    "line_number": 107,
                    "text": "document.getElementById(\"idNewOrderObject\").value = JSON.stringify(newOrderObject, null, 4);"
                },
                {
                    "line_number": 108,
                    "text": "break;"
                },
                {
                    "line_number": 109,
                    "text": "case \"TriggerBreakout\":"
                },
                {
                    "line_number": 110,
                    "text": "case \"TriggerLimit\":"
                },
                {
                    "line_number": 111,
                    "text": "case \"TriggerStop\":"
                },
                {
                    "line_number": 112,
                    "text": "console.error(\"You've selected an ordertype for a conditional order, which is not covered by this sample.\\nSee for conditional orders:\\nhttps://saxobank.github.io/openapi-samples-js/orders/conditional-orders/\");"
                },
                {
                    "line_number": 113,
                    "text": "break;"
                },
                {
                    "line_number": 114,
                    "text": "default:"
                },
                {
                    "line_number": 115,
                    "text": "console.error(\"Unsupported order type \" + newOrderObject.OrderType);"
                },
                {
                    "line_number": 116,
                    "text": "}"
                },
                {
                    "line_number": 117,
                    "text": "populateSupportedOrderDurations(newOrderObject.OrderDuration.DurationType);"
                },
                {
                    "line_number": 118,
                    "text": "}"
                },
                {
                    "line_number": 119,
                    "text": ""
                },
                {
                    "line_number": 120,
                    "text": "/**"
                },
                {
                    "line_number": 121,
                    "text": "* Adjust the order object in the textarea so the related properties comply with the chosen order duration."
                },
                {
                    "line_number": 122,
                    "text": "* @return {void}"
                },
                {
                    "line_number": 123,
                    "text": "*/"
                },
                {
                    "line_number": 124,
                    "text": "function changeOrderDuration() {"
                },
                {
                    "line_number": 125,
                    "text": ""
                },
                {
                    "line_number": 126,
                    "text": "/**"
                },
                {
                    "line_number": 127,
                    "text": "* Prefix number with zero, if it has one digit."
                },
                {
                    "line_number": 128,
                    "text": "* @param {number} n The one or two digit number representing day or month."
                },
                {
                    "line_number": 129,
                    "text": "* @return {string} The formatted number."
                },
                {
                    "line_number": 130,
                    "text": "*/"
                },
                {
                    "line_number": 131,
                    "text": "function addLeadingZero(n) {"
                },
                {
                    "line_number": 132,
                    "text": "return ("
                },
                {
                    "line_number": 133,
                    "text": "n > 9"
                },
                {
                    "line_number": 134,
                    "text": "? String(n)"
                },
                {
                    "line_number": 135,
                    "text": ": \"0\" + n"
                },
                {
                    "line_number": 136,
                    "text": ");"
                },
                {
                    "line_number": 137,
                    "text": "}"
                },
                {
                    "line_number": 138,
                    "text": ""
                },
                {
                    "line_number": 139,
                    "text": "const newOrderObject = getOrderObjectFromJson();"
                },
                {
                    "line_number": 140,
                    "text": "let now;"
                },
                {
                    "line_number": 141,
                    "text": "newOrderObject.OrderDuration.DurationType = document.getElementById(\"idCbxOrderDuration\").value;"
                },
                {
                    "line_number": 142,
                    "text": "switch (newOrderObject.OrderDuration.DurationType) {"
                },
                {
                    "line_number": 143,
                    "text": "case \"AtTheClose\":"
                },
                {
                    "line_number": 144,
                    "text": "case \"AtTheOpening\":"
                },
                {
                    "line_number": 145,
                    "text": "case \"DayOrder\":"
                },
                {
                    "line_number": 146,
                    "text": "case \"GoodForPeriod\":"
                },
                {
                    "line_number": 147,
                    "text": "case \"GoodTillCancel\":"
                },
                {
                    "line_number": 148,
                    "text": "case \"FillOrKill\":"
                },
                {
                    "line_number": 149,
                    "text": "case \"ImmediateOrCancel\":  // The order is working for a very short duration and when the time is up, the order is canceled. What ever fills happened in the short time, is what constitute a position. Primarily used for Fx and CFDs."
                },
                {
                    "line_number": 150,
                    "text": "delete newOrderObject.OrderDuration.ExpirationDateTime;"
                },
                {
                    "line_number": 151,
                    "text": "delete newOrderObject.OrderDuration.ExpirationDateContainsTime;"
                },
                {
                    "line_number": 152,
                    "text": "break;"
                },
                {
                    "line_number": 153,
                    "text": "case \"GoodTillDate\":  // Requires an explicit date. Cancellation of the order happens at some point on that date."
                },
                {
                    "line_number": 154,
                    "text": "now = new Date();"
                },
                {
                    "line_number": 155,
                    "text": "now.setDate(now.getDate() + 3);  // Add 3x24 hours to now"
                },
                {
                    "line_number": 156,
                    "text": "now.setSeconds(0, 0);"
                },
                {
                    "line_number": 157,
                    "text": "newOrderObject.OrderDuration.ExpirationDateTime = now.getFullYear() + \"-\" + addLeadingZero(now.getMonth() + 1) + \"-\" + addLeadingZero(now.getDate()) + \"T\" + addLeadingZero(now.getHours()) + \":\" + addLeadingZero(now.getMinutes()) + \":00\";  // Example: 2020-03-20T14:00:00"
                },
                {
                    "line_number": 158,
                    "text": "newOrderObject.OrderDuration.ExpirationDateContainsTime = true;"
                },
                {
                    "line_number": 159,
                    "text": "break;"
                },
                {
                    "line_number": 160,
                    "text": "default:"
                },
                {
                    "line_number": 161,
                    "text": "console.error(\"Unsupported order duration \" + newOrderObject.OrderDuration.DurationType);"
                },
                {
                    "line_number": 162,
                    "text": "}"
                },
                {
                    "line_number": 163,
                    "text": "document.getElementById(\"idNewOrderObject\").value = JSON.stringify(newOrderObject, null, 4);"
                },
                {
                    "line_number": 164,
                    "text": "}"
                },
                {
                    "line_number": 165,
                    "text": ""
                },
                {
                    "line_number": 166,
                    "text": "/**"
                },
                {
                    "line_number": 167,
                    "text": "* Add the order durations available for the selected order type to the combo box. Pre-select the type which was selected before, when available."
                },
                {
                    "line_number": 168,
                    "text": "* @param {string} selectedOrderDuration The order duration to be selected."
                },
                {
                    "line_number": 169,
                    "text": "* @return {void}"
                },
                {
                    "line_number": 170,
                    "text": "*/"
                },
                {
                    "line_number": 171,
                    "text": "function populateSupportedOrderDurations(selectedOrderDuration) {"
                },
                {
                    "line_number": 172,
                    "text": "const cbxOrderType = document.getElementById(\"idCbxOrderType\");"
                },
                {
                    "line_number": 173,
                    "text": "const cbxOrderDuration = document.getElementById(\"idCbxOrderDuration\");"
                },
                {
                    "line_number": 174,
                    "text": "// The durations were stored, when parsing the instrument details. The can differ per OrderType."
                },
                {
                    "line_number": 175,
                    "text": "const supportedDurations = cbxOrderType.options[cbxOrderType.selectedIndex].dataset.durations.split(\"|\");"
                },
                {
                    "line_number": 176,
                    "text": "let isSelectedDurationSupported = false;"
                },
                {
                    "line_number": 177,
                    "text": "let option;"
                },
                {
                    "line_number": 178,
                    "text": "let i;"
                },
                {
                    "line_number": 179,
                    "text": "// Make the list empty first.."
                },
                {
                    "line_number": 180,
                    "text": "for (i = cbxOrderDuration.options.length - 1; i >= 0; i -= 1) {"
                },
                {
                    "line_number": 181,
                    "text": "cbxOrderDuration.remove(i);"
                },
                {
                    "line_number": 182,
                    "text": "}"
                },
                {
                    "line_number": 183,
                    "text": "supportedDurations.forEach(function (orderDuration) {"
                },
                {
                    "line_number": 184,
                    "text": "option = document.createElement(\"option\");"
                },
                {
                    "line_number": 185,
                    "text": "option.text = orderDuration;"
                },
                {
                    "line_number": 186,
                    "text": "option.value = orderDuration;"
                },
                {
                    "line_number": 187,
                    "text": "if (orderDuration === selectedOrderDuration) {"
                },
                {
                    "line_number": 188,
                    "text": "option.setAttribute(\"selected\", true);  // Make the selected type the default one"
                },
                {
                    "line_number": 189,
                    "text": "isSelectedDurationSupported = true;"
                },
                {
                    "line_number": 190,
                    "text": "}"
                },
                {
                    "line_number": 191,
                    "text": "cbxOrderDuration.add(option);"
                },
                {
                    "line_number": 192,
                    "text": "});"
                },
                {
                    "line_number": 193,
                    "text": "if (!isSelectedDurationSupported) {"
                },
                {
                    "line_number": 194,
                    "text": "// Update the duration in the order object, because it is not supported."
                },
                {
                    "line_number": 195,
                    "text": "changeOrderDuration();"
                },
                {
                    "line_number": 196,
                    "text": "}"
                },
                {
                    "line_number": 197,
                    "text": "}"
                },
                {
                    "line_number": 198,
                    "text": ""
                },
                {
                    "line_number": 199,
                    "text": "/**"
                },
                {
                    "line_number": 200,
                    "text": "* Add the order types available for this instrument (and account) to the combo box. Pre-select the type which was selected before, when available."
                },
                {
                    "line_number": 201,
                    "text": "* @param {Array} orderTypeSettings The order types to be added."
                },
                {
                    "line_number": 202,
                    "text": "* @param {string} selectedOrderType The order type to be selected."
                },
                {
                    "line_number": 203,
                    "text": "* @return {void}"
                },
                {
                    "line_number": 204,
                    "text": "*/"
                },
                {
                    "line_number": 205,
                    "text": "function populateSupportedOrderTypes(orderTypeSettings, selectedOrderType) {"
                },
                {
                    "line_number": 206,
                    "text": "const cbxOrderType = document.getElementById(\"idCbxOrderType\");"
                },
                {
                    "line_number": 207,
                    "text": "let option;"
                },
                {
                    "line_number": 208,
                    "text": "let isSelectedOrderTypeSupported = false;"
                },
                {
                    "line_number": 209,
                    "text": "let i;"
                },
                {
                    "line_number": 210,
                    "text": "// Make the list empty first.."
                },
                {
                    "line_number": 211,
                    "text": "for (i = cbxOrderType.options.length - 1; i >= 0; i -= 1) {"
                },
                {
                    "line_number": 212,
                    "text": "cbxOrderType.remove(i);"
                },
                {
                    "line_number": 213,
                    "text": "}"
                },
                {
                    "line_number": 214,
                    "text": "orderTypeSettings.forEach(function (orderTypeSetting) {"
                },
                {
                    "line_number": 215,
                    "text": "option = document.createElement(\"option\");"
                },
                {
                    "line_number": 216,
                    "text": "option.text = orderTypeSetting.OrderType;"
                },
                {
                    "line_number": 217,
                    "text": "option.value = orderTypeSetting.OrderType;"
                },
                {
                    "line_number": 218,
                    "text": "// Store the supported durations for this OrderType:"
                },
                {
                    "line_number": 219,
                    "text": "option.dataset.durations = orderTypeSetting.DurationTypes.join(\"|\");"
                },
                {
                    "line_number": 220,
                    "text": "if (orderTypeSetting.OrderType === selectedOrderType) {"
                },
                {
                    "line_number": 221,
                    "text": "option.setAttribute(\"selected\", true);  // Make the selected type the default one"
                },
                {
                    "line_number": 222,
                    "text": "isSelectedOrderTypeSupported = true;"
                },
                {
                    "line_number": 223,
                    "text": "}"
                },
                {
                    "line_number": 224,
                    "text": "cbxOrderType.add(option);"
                },
                {
                    "line_number": 225,
                    "text": "});"
                },
                {
                    "line_number": 226,
                    "text": "if (!isSelectedOrderTypeSupported) {"
                },
                {
                    "line_number": 227,
                    "text": "changeOrderType();  // The current order type is not supported. Change to a different one"
                },
                {
                    "line_number": 228,
                    "text": "}"
                },
                {
                    "line_number": 229,
                    "text": "}"
                },
                {
                    "line_number": 230,
                    "text": ""
                },
                {
                    "line_number": 231,
                    "text": "/**"
                },
                {
                    "line_number": 232,
                    "text": "* This is an example of getting the series (option sheet, or option space) of an option root."
                },
                {
                    "line_number": 233,
                    "text": "* @return {void}"
                },
                {
                    "line_number": 234,
                    "text": "*/"
                },
                {
                    "line_number": 235,
                    "text": "function getSeries() {"
                },
                {
                    "line_number": 236,
                    "text": "const newOrderObject = getOrderObjectFromJson();"
                },
                {
                    "line_number": 237,
                    "text": "const optionRootId = document.getElementById(\"idInstrumentId\").value;"
                },
                {
                    "line_number": 238,
                    "text": "fetch("
                },
                {
                    "line_number": 239,
                    "text": "// Don't filter on parameter \"TradingStatus=Tradable\", because many series have status \"NotDefined\""
                },
                {
                    "line_number": 240,
                    "text": "demo.apiUrl + \"/ref/v1/instruments/contractoptionspaces/\" + optionRootId + \"?OptionSpaceSegment=AllDates\","
                },
                {
                    "line_number": 241,
                    "text": "{"
                },
                {
                    "line_number": 242,
                    "text": "\"method\": \"GET\","
                },
                {
                    "line_number": 243,
                    "text": "\"headers\": {"
                },
                {
                    "line_number": 244,
                    "text": "\"Authorization\": \"Bearer \" + document.getElementById(\"idBearerToken\").value"
                },
                {
                    "line_number": 245,
                    "text": "}"
                },
                {
                    "line_number": 246,
                    "text": "}"
                },
                {
                    "line_number": 247,
                    "text": ").then(function (response) {"
                },
                {
                    "line_number": 248,
                    "text": "if (response.ok) {"
                },
                {
                    "line_number": 249,
                    "text": "response.json().then(function (responseJson) {"
                },
                {
                    "line_number": 250,
                    "text": "if (responseJson.hasOwnProperty(\"OptionSpace\")) {"
                },
                {
                    "line_number": 251,
                    "text": "newOrderObject.Uic = responseJson.OptionSpace[0].SpecificOptions[0].Uic;"
                },
                {
                    "line_number": 252,
                    "text": "newOrderObject.AssetType = responseJson.AssetType;  // Can differ (FuturesOption, StockOption, StockIndexOption)"
                },
                {
                    "line_number": 253,
                    "text": "document.getElementById(\"idNewOrderObject\").value = JSON.stringify(newOrderObject, null, 4);"
                },
                {
                    "line_number": 254,
                    "text": "console.log(JSON.stringify(responseJson, null, 4));"
                },
                {
                    "line_number": 255,
                    "text": "} else {"
                },
                {
                    "line_number": 256,
                    "text": "// This can happen when the filter is too strict!"
                },
                {
                    "line_number": 257,
                    "text": "console.error(\"No option series found for this root. Are you filtering the results using TradingStatus?\\n\\n\" + JSON.stringify(responseJson, null, 4));"
                },
                {
                    "line_number": 258,
                    "text": "}"
                },
                {
                    "line_number": 259,
                    "text": "});"
                },
                {
                    "line_number": 260,
                    "text": "} else {"
                },
                {
                    "line_number": 261,
                    "text": "demo.processError(response);"
                },
                {
                    "line_number": 262,
                    "text": "}"
                },
                {
                    "line_number": 263,
                    "text": "}).catch(function (error) {"
                },
                {
                    "line_number": 264,
                    "text": "console.error(error);"
                },
                {
                    "line_number": 265,
                    "text": "});"
                },
                {
                    "line_number": 266,
                    "text": "}"
                },
                {
                    "line_number": 267,
                    "text": ""
                },
                {
                    "line_number": 268,
                    "text": "/**"
                },
                {
                    "line_number": 269,
                    "text": "* This is an example of getting the trading settings of an instrument."
                },
                {
                    "line_number": 270,
                    "text": "* @return {void}"
                },
                {
                    "line_number": 271,
                    "text": "*/"
                },
                {
                    "line_number": 272,
                    "text": "function getConditions() {"
                },
                {
                    "line_number": 273,
                    "text": ""
                },
                {
                    "line_number": 274,
                    "text": "/**"
                },
                {
                    "line_number": 275,
                    "text": "* The instrument is tradable, but there might be limitations. If so, display them."
                },
                {
                    "line_number": 276,
                    "text": "* @param {Object} detailsObject The response with the instrument details."
                },
                {
                    "line_number": 277,
                    "text": "* @return {void}"
                },
                {
                    "line_number": 278,
                    "text": "*/"
                },
                {
                    "line_number": 279,
                    "text": "function checkTradingStatus(detailsObject) {"
                },
                {
                    "line_number": 280,
                    "text": "let statusDescription = \"This instrument has trading limitations:\\n\";"
                },
                {
                    "line_number": 281,
                    "text": "if (detailsObject.TradingStatus !== \"Tradable\") {"
                },
                {
                    "line_number": 282,
                    "text": "if (detailsObject.hasOwnProperty(\"NonTradableReason\")) {"
                },
                {
                    "line_number": 283,
                    "text": "switch (detailsObject.NonTradableReason) {"
                },
                {
                    "line_number": 284,
                    "text": "case \"ETFsWithoutKIIDs\":"
                },
                {
                    "line_number": 285,
                    "text": "statusDescription += \"The issuer has not provided a Key Information Document (KID) for this instrument.\";"
                },
                {
                    "line_number": 286,
                    "text": "break;"
                },
                {
                    "line_number": 287,
                    "text": "case \"ExpiredInstrument\":"
                },
                {
                    "line_number": 288,
                    "text": "statusDescription += \"This instrument has expired.\";"
                },
                {
                    "line_number": 289,
                    "text": "break;"
                },
                {
                    "line_number": 290,
                    "text": "case \"NonShortableInstrument\":"
                },
                {
                    "line_number": 291,
                    "text": "statusDescription += \"Short selling is not available for this instrument.\";"
                },
                {
                    "line_number": 292,
                    "text": "break;"
                },
                {
                    "line_number": 293,
                    "text": "case \"NotOnlineClientTradable\":"
                },
                {
                    "line_number": 294,
                    "text": "statusDescription += \"This instrument is not tradable online.\";"
                },
                {
                    "line_number": 295,
                    "text": "break;"
                },
                {
                    "line_number": 296,
                    "text": "case \"OfflineTradableBonds\":"
                },
                {
                    "line_number": 297,
                    "text": "statusDescription += \"This instrument is tradable offline.\";"
                },
                {
                    "line_number": 298,
                    "text": "break;"
                },
                {
                    "line_number": 299,
                    "text": "case \"ReduceOnlyInstrument\":"
                },
                {
                    "line_number": 300,
                    "text": "statusDescription += \"This instrument is reduce-only.\";"
                },
                {
                    "line_number": 301,
                    "text": "break;"
                },
                {
                    "line_number": 302,
                    "text": "default:"
                },
                {
                    "line_number": 303,
                    "text": "// There are reasons \"OtherReason\" and \"None\"."
                },
                {
                    "line_number": 304,
                    "text": "statusDescription += \"This instrument is not tradable.\";"
                },
                {
                    "line_number": 305,
                    "text": "}"
                },
                {
                    "line_number": 306,
                    "text": "statusDescription += \"\\n(\" + detailsObject.NonTradableReason + \")\";"
                },
                {
                    "line_number": 307,
                    "text": "} else {"
                },
                {
                    "line_number": 308,
                    "text": "// Somehow not reason was supplied."
                },
                {
                    "line_number": 309,
                    "text": "statusDescription += \"Status: \" + detailsObject.TradingStatus;"
                },
                {
                    "line_number": 310,
                    "text": "}"
                },
                {
                    "line_number": 311,
                    "text": "window.alert(statusDescription);"
                },
                {
                    "line_number": 312,
                    "text": "}"
                },
                {
                    "line_number": 313,
                    "text": "}"
                },
                {
                    "line_number": 314,
                    "text": ""
                },
                {
                    "line_number": 315,
                    "text": "/**"
                },
                {
                    "line_number": 316,
                    "text": "* Verify if the selected account is capable of handling this instrument."
                },
                {
                    "line_number": 317,
                    "text": "* @param {Array<string>} tradableOn Supported account list."
                },
                {
                    "line_number": 318,
                    "text": "* @return {void}"
                },
                {
                    "line_number": 319,
                    "text": "*/"
                },
                {
                    "line_number": 320,
                    "text": "function checkSupportedAccounts(tradableOn) {"
                },
                {
                    "line_number": 321,
                    "text": "// Verify if the selected account is capable of handling this instrument."
                },
                {
                    "line_number": 322,
                    "text": "// First, get the id of the active account:"
                },
                {
                    "line_number": 323,
                    "text": "const activeAccountId = demo.user.accounts.find(function (i) {"
                },
                {
                    "line_number": 324,
                    "text": "return i.accountKey === demo.user.accountKey;"
                },
                {
                    "line_number": 325,
                    "text": "}).accountId;"
                },
                {
                    "line_number": 326,
                    "text": "// Next, check if instrument is allowed on this account:"
                },
                {
                    "line_number": 327,
                    "text": "if (tradableOn.length === 0) {"
                },
                {
                    "line_number": 328,
                    "text": "window.alert(\"This instrument cannot be traded on any of your accounts.\");"
                },
                {
                    "line_number": 329,
                    "text": "} else if (tradableOn.indexOf(activeAccountId) === -1) {"
                },
                {
                    "line_number": 330,
                    "text": "window.alert(\"This instrument cannot be traded on the selected account \" + activeAccountId + \", but only on \" + tradableOn.join(\", \") + \".\");"
                },
                {
                    "line_number": 331,
                    "text": "}"
                },
                {
                    "line_number": 332,
                    "text": "}"
                },
                {
                    "line_number": 333,
                    "text": ""
                },
                {
                    "line_number": 334,
                    "text": "function calculateFactor(tickSize) {"
                },
                {
                    "line_number": 335,
                    "text": "let numberOfDecimals = 0;"
                },
                {
                    "line_number": 336,
                    "text": "if ((tickSize % 1) !== 0) {"
                },
                {
                    "line_number": 337,
                    "text": "numberOfDecimals = tickSize.toString().split(\".\")[1].length;"
                },
                {
                    "line_number": 338,
                    "text": "}"
                },
                {
                    "line_number": 339,
                    "text": "return Math.pow(10, numberOfDecimals);"
                },
                {
                    "line_number": 340,
                    "text": "}"
                },
                {
                    "line_number": 341,
                    "text": ""
                },
                {
                    "line_number": 342,
                    "text": "function checkTickSize(orderObject, tickSize) {"
                },
                {
                    "line_number": 343,
                    "text": "const factor = calculateFactor(tickSize);  // Modulo doesn't support fractions, so multiply with a factor"
                },
                {
                    "line_number": 344,
                    "text": "if (Math.round(orderObject.OrderPrice * factor) % Math.round(tickSize * factor) !== 0) {"
                },
                {
                    "line_number": 345,
                    "text": "window.alert(\"The price of \" + orderObject.OrderPrice + \" doesn't match the tick size of \" + tickSize);"
                },
                {
                    "line_number": 346,
                    "text": "}"
                },
                {
                    "line_number": 347,
                    "text": "}"
                },
                {
                    "line_number": 348,
                    "text": ""
                },
                {
                    "line_number": 349,
                    "text": "function checkTickSizes(orderObject, tickSizeScheme) {"
                },
                {
                    "line_number": 350,
                    "text": "let tickSize = tickSizeScheme.DefaultTickSize;"
                },
                {
                    "line_number": 351,
                    "text": "let i;"
                },
                {
                    "line_number": 352,
                    "text": "for (i = 0; i < tickSizeScheme.Elements.length; i += 1) {"
                },
                {
                    "line_number": 353,
                    "text": "if (orderObject.OrderPrice <= tickSizeScheme.Elements[i].HighPrice) {"
                },
                {
                    "line_number": 354,
                    "text": "tickSize = tickSizeScheme.Elements[i].TickSize;  // The price is below a threshold and therefore not the default"
                },
                {
                    "line_number": 355,
                    "text": "break;"
                },
                {
                    "line_number": 356,
                    "text": "}"
                },
                {
                    "line_number": 357,
                    "text": "}"
                },
                {
                    "line_number": 358,
                    "text": "checkTickSize(orderObject, tickSize);"
                },
                {
                    "line_number": 359,
                    "text": "}"
                },
                {
                    "line_number": 360,
                    "text": ""
                },
                {
                    "line_number": 361,
                    "text": "function checkMinimumTradeSize(orderObject, detailsObject) {"
                },
                {
                    "line_number": 362,
                    "text": "if (orderObject.Amount < detailsObject.MinimumTradeSize) {"
                },
                {
                    "line_number": 363,
                    "text": "window.alert(\"The order amount must be at least the minimumTradeSize of \" + detailsObject.MinimumTradeSize);"
                },
                {
                    "line_number": 364,
                    "text": "}"
                },
                {
                    "line_number": 365,
                    "text": "}"
                },
                {
                    "line_number": 366,
                    "text": ""
                },
                {
                    "line_number": 367,
                    "text": "function checkMinimumOrderValue(orderObject, detailsObject) {"
                },
                {
                    "line_number": 368,
                    "text": "const price = ("
                },
                {
                    "line_number": 369,
                    "text": "orderObject.hasOwnProperty(\"OrderPrice\")"
                },
                {
                    "line_number": 370,
                    "text": "? orderObject.OrderPrice"
                },
                {
                    "line_number": 371,
                    "text": ": fictivePrice  // SIM doesn't allow calls to price endpoint for most instruments so just take something"
                },
                {
                    "line_number": 372,
                    "text": ");"
                },
                {
                    "line_number": 373,
                    "text": "if (orderObject.Amount * price < detailsObject.MinimumOrderValue) {"
                },
                {
                    "line_number": 374,
                    "text": "window.alert(\"The order value (amount * price) must be at least the minimumOrderValue of \" + detailsObject.MinimumOrderValue);"
                },
                {
                    "line_number": 375,
                    "text": "}"
                },
                {
                    "line_number": 376,
                    "text": "}"
                },
                {
                    "line_number": 377,
                    "text": ""
                },
                {
                    "line_number": 378,
                    "text": "function checkLotSizes(orderObject, detailsObject) {"
                },
                {
                    "line_number": 379,
                    "text": "if (orderObject.Amount < detailsObject.MinimumLotSize) {"
                },
                {
                    "line_number": 380,
                    "text": "window.alert(\"The amount must be at least the minimumLotSize of \" + detailsObject.MinimumLotSize);"
                },
                {
                    "line_number": 381,
                    "text": "}"
                },
                {
                    "line_number": 382,
                    "text": "if (detailsObject.hasOwnProperty(\"LotSize\") && orderObject.Amount % detailsObject.LotSize !== 0) {"
                },
                {
                    "line_number": 383,
                    "text": "window.alert(\"The amount must be the lot size or a multiplication of \" + detailsObject.LotSize);"
                },
                {
                    "line_number": 384,
                    "text": "}"
                },
                {
                    "line_number": 385,
                    "text": "}"
                },
                {
                    "line_number": 386,
                    "text": ""
                },
                {
                    "line_number": 387,
                    "text": "const newOrderObject = getOrderObjectFromJson();"
                },
                {
                    "line_number": 388,
                    "text": "// This requests gets the order settings of the selected instrument."
                },
                {
                    "line_number": 389,
                    "text": "// By adding the AccountKey, specific account settings are considered as well."
                },
                {
                    "line_number": 390,
                    "text": "fetch("
                },
                {
                    "line_number": 391,
                    "text": "demo.apiUrl + \"/ref/v1/instruments/details/\" + newOrderObject.Uic + \"/\" + newOrderObject.AssetType + \"?AccountKey=\" + encodeURIComponent(demo.user.accountKey) + \"&FieldGroups=SupportedOrderTypeSettings\","
                },
                {
                    "line_number": 392,
                    "text": "{"
                },
                {
                    "line_number": 393,
                    "text": "\"method\": \"GET\","
                },
                {
                    "line_number": 394,
                    "text": "\"headers\": {"
                },
                {
                    "line_number": 395,
                    "text": "\"Authorization\": \"Bearer \" + document.getElementById(\"idBearerToken\").value"
                },
                {
                    "line_number": 396,
                    "text": "}"
                },
                {
                    "line_number": 397,
                    "text": "}"
                },
                {
                    "line_number": 398,
                    "text": ").then(function (response) {"
                },
                {
                    "line_number": 399,
                    "text": "if (response.ok) {"
                },
                {
                    "line_number": 400,
                    "text": "response.json().then(function (responseJson) {"
                },
                {
                    "line_number": 401,
                    "text": "populateSupportedOrderTypes(responseJson.SupportedOrderTypeSettings, newOrderObject.OrderType);"
                },
                {
                    "line_number": 402,
                    "text": "populateSupportedOrderDurations(newOrderObject.OrderDuration.DurationType);"
                },
                {
                    "line_number": 403,
                    "text": "console.log(JSON.stringify(responseJson, null, 4));"
                },
                {
                    "line_number": 404,
                    "text": "if (responseJson.IsTradable === false) {"
                },
                {
                    "line_number": 405,
                    "text": "window.alert(\"This instrument is not tradable!\");"
                },
                {
                    "line_number": 406,
                    "text": "// For demonstration purposes the validation continues, but an order ticket shouldn't be shown!"
                },
                {
                    "line_number": 407,
                    "text": "}"
                },
                {
                    "line_number": 408,
                    "text": "checkTradingStatus(responseJson);"
                },
                {
                    "line_number": 409,
                    "text": "if (newOrderObject.OrderType !== \"Market\" && newOrderObject.OrderType !== \"TraspasoIn\") {"
                },
                {
                    "line_number": 410,
                    "text": "if (responseJson.hasOwnProperty(\"TickSizeScheme\")) {"
                },
                {
                    "line_number": 411,
                    "text": "checkTickSizes(newOrderObject, responseJson.TickSizeScheme);"
                },
                {
                    "line_number": 412,
                    "text": "} else if (responseJson.hasOwnProperty(\"TickSize\")) {"
                },
                {
                    "line_number": 413,
                    "text": "checkTickSize(newOrderObject, responseJson.TickSize);"
                },
                {
                    "line_number": 414,
                    "text": "}"
                },
                {
                    "line_number": 415,
                    "text": "}"
                },
                {
                    "line_number": 416,
                    "text": "checkSupportedAccounts(responseJson.TradableOn);"
                },
                {
                    "line_number": 417,
                    "text": "checkMinimumTradeSize(newOrderObject, responseJson);"
                },
                {
                    "line_number": 418,
                    "text": "if (newOrderObject.AssetType === \"Stock\") {"
                },
                {
                    "line_number": 419,
                    "text": "checkMinimumOrderValue(newOrderObject, responseJson);"
                },
                {
                    "line_number": 420,
                    "text": "}"
                },
                {
                    "line_number": 421,
                    "text": "if (newOrderObject.AssetType === \"Stock\" && responseJson.LotSizeType !== \"NotUsed\") {"
                },
                {
                    "line_number": 422,
                    "text": "checkLotSizes(newOrderObject, responseJson);"
                },
                {
                    "line_number": 423,
                    "text": "}"
                },
                {
                    "line_number": 424,
                    "text": "});"
                },
                {
                    "line_number": 425,
                    "text": "} else {"
                },
                {
                    "line_number": 426,
                    "text": "demo.processError(response);"
                },
                {
                    "line_number": 427,
                    "text": "}"
                },
                {
                    "line_number": 428,
                    "text": "}).catch(function (error) {"
                },
                {
                    "line_number": 429,
                    "text": "console.error(error);"
                },
                {
                    "line_number": 430,
                    "text": "});"
                },
                {
                    "line_number": 431,
                    "text": "}"
                },
                {
                    "line_number": 432,
                    "text": ""
                },
                {
                    "line_number": 433,
                    "text": "/**"
                },
                {
                    "line_number": 434,
                    "text": "* This is an example of an order validation."
                },
                {
                    "line_number": 435,
                    "text": "* @return {void}"
                },
                {
                    "line_number": 436,
                    "text": "*/"
                },
                {
                    "line_number": 437,
                    "text": "function preCheckNewOrder() {"
                },
                {
                    "line_number": 438,
                    "text": "// Bug: Preview doesn't check for limit outside market hours"
                },
                {
                    "line_number": 439,
                    "text": ""
                },
                {
                    "line_number": 440,
                    "text": "function getErrorMessage(responseJson, defaultMessage) {"
                },
                {
                    "line_number": 441,
                    "text": "let errorMessage;"
                },
                {
                    "line_number": 442,
                    "text": "if (responseJson.hasOwnProperty(\"ErrorInfo\")) {"
                },
                {
                    "line_number": 443,
                    "text": "// Be aware that the ErrorInfo.Message might contain line breaks, escaped like \"\\r\\n\"!"
                },
                {
                    "line_number": 444,
                    "text": "errorMessage = ("
                },
                {
                    "line_number": 445,
                    "text": "responseJson.ErrorInfo.hasOwnProperty(\"Message\")"
                },
                {
                    "line_number": 446,
                    "text": "? responseJson.ErrorInfo.Message"
                },
                {
                    "line_number": 447,
                    "text": ": responseJson.ErrorInfo.ErrorCode  // In some cases (AllocationKeyDoesNotMatchAccount) the message is not available"
                },
                {
                    "line_number": 448,
                    "text": ");"
                },
                {
                    "line_number": 449,
                    "text": "// There can be error messages per order. Try to add them."
                },
                {
                    "line_number": 450,
                    "text": "if (responseJson.hasOwnProperty(\"Orders\")) {"
                },
                {
                    "line_number": 451,
                    "text": "responseJson.Orders.forEach(function (order) {"
                },
                {
                    "line_number": 452,
                    "text": "errorMessage += \"\\n- \" + getErrorMessage(order, \"\");"
                },
                {
                    "line_number": 453,
                    "text": "});"
                },
                {
                    "line_number": 454,
                    "text": "}"
                },
                {
                    "line_number": 455,
                    "text": "} else {"
                },
                {
                    "line_number": 456,
                    "text": "errorMessage = defaultMessage;"
                },
                {
                    "line_number": 457,
                    "text": "}"
                },
                {
                    "line_number": 458,
                    "text": "return errorMessage;"
                },
                {
                    "line_number": 459,
                    "text": "}"
                },
                {
                    "line_number": 460,
                    "text": ""
                },
                {
                    "line_number": 461,
                    "text": "const newOrderObject = getOrderObjectFromJson();"
                },
                {
                    "line_number": 462,
                    "text": "newOrderObject.FieldGroups = [\"Costs\", \"MarginImpactBuySell\"];"
                },
                {
                    "line_number": 463,
                    "text": "fetch("
                },
                {
                    "line_number": 464,
                    "text": "demo.apiUrl + \"/trade/v2/orders/precheck\","
                },
                {
                    "line_number": 465,
                    "text": "{"
                },
                {
                    "line_number": 466,
                    "text": "\"method\": \"POST\","
                },
                {
                    "line_number": 467,
                    "text": "\"headers\": {"
                },
                {
                    "line_number": 468,
                    "text": "\"Authorization\": \"Bearer \" + document.getElementById(\"idBearerToken\").value,"
                },
                {
                    "line_number": 469,
                    "text": "\"Content-Type\": \"application/json; charset=utf-8\","
                },
                {
                    "line_number": 470,
                    "text": "\"X-Request-ID\": Math.random()  // This prevents error 409 (Conflict) from identical previews within 15 seconds"
                },
                {
                    "line_number": 471,
                    "text": "},"
                },
                {
                    "line_number": 472,
                    "text": "\"body\": JSON.stringify(newOrderObject)"
                },
                {
                    "line_number": 473,
                    "text": "}"
                },
                {
                    "line_number": 474,
                    "text": ").then(function (response) {"
                },
                {
                    "line_number": 475,
                    "text": "if (response.ok) {"
                },
                {
                    "line_number": 476,
                    "text": "response.json().then(function (responseJson) {"
                },
                {
                    "line_number": 477,
                    "text": "// Response must have PreCheckResult property being \"Ok\""
                },
                {
                    "line_number": 478,
                    "text": "if (responseJson.PreCheckResult === \"Ok\") {"
                },
                {
                    "line_number": 479,
                    "text": "// Secondly, you can have a PreCheckResult of \"Ok\", but still a (functional) error"
                },
                {
                    "line_number": 480,
                    "text": "// Order could be placed if the account had sufficient margin and funding."
                },
                {
                    "line_number": 481,
                    "text": "// In this case all calculated cost and margin values are in the response, together with an ErrorInfo object:"
                },
                {
                    "line_number": 482,
                    "text": "if (responseJson.hasOwnProperty(\"ErrorInfo\")) {"
                },
                {
                    "line_number": 483,
                    "text": "// Be aware that the ErrorInfo.Message might contain line breaks, escaped like \"\\r\\n\"!"
                },
                {
                    "line_number": 484,
                    "text": "console.error(getErrorMessage(responseJson, \"\") + \"\\n\\n\" + JSON.stringify(responseJson, null, 4));"
                },
                {
                    "line_number": 485,
                    "text": "} else {"
                },
                {
                    "line_number": 486,
                    "text": "// The order can be placed"
                },
                {
                    "line_number": 487,
                    "text": "console.log(\"The order can be placed:\\n\\n\" + JSON.stringify(responseJson, null, 4));"
                },
                {
                    "line_number": 488,
                    "text": "}"
                },
                {
                    "line_number": 489,
                    "text": "} else {"
                },
                {
                    "line_number": 490,
                    "text": "// Order request is syntactically correct, but the order cannot be placed, as it would violate semantic rules"
                },
                {
                    "line_number": 491,
                    "text": "// This can be something like: {\"ErrorInfo\":{\"ErrorCode\":\"IllegalInstrumentId\",\"Message\":\"Instrument ID is invalid\"},\"EstimatedCashRequired\":0.0,\"PreCheckResult\":\"Error\"}"
                },
                {
                    "line_number": 492,
                    "text": "console.error(getErrorMessage(responseJson, \"Order request is syntactically correct, but the order cannot be placed, as it would violate semantic rules:\") + \"\\n\\n\" + JSON.stringify(responseJson, null, 4) + \"\\n\\nX-Correlation header (for troubleshooting with Saxo): \" + response.headers.get(\"X-Correlation\"));"
                },
                {
                    "line_number": 493,
                    "text": "}"
                },
                {
                    "line_number": 494,
                    "text": "});"
                },
                {
                    "line_number": 495,
                    "text": "} else {"
                },
                {
                    "line_number": 496,
                    "text": "// This can be something like: {\"Message\":\"One or more properties of the request are invalid!\",\"ModelState\":{\"Orders\":[\"Stop leg of OCO order must have OrderType of either: TrailingStopIfTraded, StopIfTraded, StopLimit\"]},\"ErrorCode\":\"InvalidModelState\"}"
                },
                {
                    "line_number": 497,
                    "text": "// The developer (you) must fix this."
                },
                {
                    "line_number": 498,
                    "text": "demo.processError(response);"
                },
                {
                    "line_number": 499,
                    "text": "}"
                },
                {
                    "line_number": 500,
                    "text": "}).catch(function (error) {"
                },
                {
                    "line_number": 501,
                    "text": "console.error(error);"
                },
                {
                    "line_number": 502,
                    "text": "});"
                },
                {
                    "line_number": 503,
                    "text": "}"
                },
                {
                    "line_number": 504,
                    "text": ""
                },
                {
                    "line_number": 505,
                    "text": "/**"
                },
                {
                    "line_number": 506,
                    "text": "* This is an example of placing a single leg order."
                },
                {
                    "line_number": 507,
                    "text": "* @return {void}"
                },
                {
                    "line_number": 508,
                    "text": "*/"
                },
                {
                    "line_number": 509,
                    "text": "function placeNewOrder() {"
                },
                {
                    "line_number": 510,
                    "text": "const newOrderObject = getOrderObjectFromJson();"
                },
                {
                    "line_number": 511,
                    "text": "const headersObject = {"
                },
                {
                    "line_number": 512,
                    "text": "\"Authorization\": \"Bearer \" + document.getElementById(\"idBearerToken\").value,"
                },
                {
                    "line_number": 513,
                    "text": "\"Content-Type\": \"application/json; charset=utf-8\""
                },
                {
                    "line_number": 514,
                    "text": "};"
                },
                {
                    "line_number": 515,
                    "text": "if (document.getElementById(\"idChkRequestIdHeader\").checked) {"
                },
                {
                    "line_number": 516,
                    "text": "headersObject[\"X-Request-ID\"] = newOrderObject.ExternalReference;  // Warning! Prevent error 409 (Conflict) from identical orders within 15 seconds"
                },
                {
                    "line_number": 517,
                    "text": "}"
                },
                {
                    "line_number": 518,
                    "text": "fetch("
                },
                {
                    "line_number": 519,
                    "text": "demo.apiUrl + \"/trade/v2/orders\","
                },
                {
                    "line_number": 520,
                    "text": "{"
                },
                {
                    "line_number": 521,
                    "text": "\"method\": \"POST\","
                },
                {
                    "line_number": 522,
                    "text": "\"headers\": headersObject,"
                },
                {
                    "line_number": 523,
                    "text": "\"body\": JSON.stringify(newOrderObject)"
                },
                {
                    "line_number": 524,
                    "text": "}"
                },
                {
                    "line_number": 525,
                    "text": ").then(function (response) {"
                },
                {
                    "line_number": 526,
                    "text": "if (response.ok) {"
                },
                {
                    "line_number": 527,
                    "text": "response.json().then(function (responseJson) {"
                },
                {
                    "line_number": 528,
                    "text": "const xRequestId = response.headers.get(\"X-Request-ID\");"
                },
                {
                    "line_number": 529,
                    "text": "console.log(\"Successful request:\\n\" + JSON.stringify(responseJson, null, 4) + ("
                },
                {
                    "line_number": 530,
                    "text": "xRequestId === null"
                },
                {
                    "line_number": 531,
                    "text": "? \"\""
                },
                {
                    "line_number": 532,
                    "text": ": \"\\nX-Request-ID response header: \" + xRequestId"
                },
                {
                    "line_number": 533,
                    "text": "));"
                },
                {
                    "line_number": 534,
                    "text": "lastOrderId = responseJson.OrderId;"
                },
                {
                    "line_number": 535,
                    "text": "});"
                },
                {
                    "line_number": 536,
                    "text": "} else {"
                },
                {
                    "line_number": 537,
                    "text": "demo.processError(response);"
                },
                {
                    "line_number": 538,
                    "text": "}"
                },
                {
                    "line_number": 539,
                    "text": "}).catch(function (error) {"
                },
                {
                    "line_number": 540,
                    "text": "console.error(error);"
                },
                {
                    "line_number": 541,
                    "text": "});"
                },
                {
                    "line_number": 542,
                    "text": "}"
                },
                {
                    "line_number": 543,
                    "text": ""
                },
                {
                    "line_number": 544,
                    "text": "/**"
                },
                {
                    "line_number": 545,
                    "text": "* This is an example of updating a single leg order."
                },
                {
                    "line_number": 546,
                    "text": "* @return {void}"
                },
                {
                    "line_number": 547,
                    "text": "*/"
                },
                {
                    "line_number": 548,
                    "text": "function modifyLastOrder() {"
                },
                {
                    "line_number": 549,
                    "text": "const newOrderObject = getOrderObjectFromJson();"
                },
                {
                    "line_number": 550,
                    "text": "const headersObject = {"
                },
                {
                    "line_number": 551,
                    "text": "\"Authorization\": \"Bearer \" + document.getElementById(\"idBearerToken\").value,"
                },
                {
                    "line_number": 552,
                    "text": "\"Content-Type\": \"application/json; charset=utf-8\""
                },
                {
                    "line_number": 553,
                    "text": "};"
                },
                {
                    "line_number": 554,
                    "text": "newOrderObject.OrderId = lastOrderId;"
                },
                {
                    "line_number": 555,
                    "text": "if (document.getElementById(\"idChkRequestIdHeader\").checked) {"
                },
                {
                    "line_number": 556,
                    "text": "headersObject[\"X-Request-ID\"] = newOrderObject.ExternalReference;  // Warning! Prevent error 409 (Conflict) from identical orders within 15 seconds"
                },
                {
                    "line_number": 557,
                    "text": "}"
                },
                {
                    "line_number": 558,
                    "text": "fetch("
                },
                {
                    "line_number": 559,
                    "text": "demo.apiUrl + \"/trade/v2/orders\","
                },
                {
                    "line_number": 560,
                    "text": "{"
                },
                {
                    "line_number": 561,
                    "text": "\"method\": \"PATCH\","
                },
                {
                    "line_number": 562,
                    "text": "\"headers\": headersObject,"
                },
                {
                    "line_number": 563,
                    "text": "\"body\": JSON.stringify(newOrderObject)"
                },
                {
                    "line_number": 564,
                    "text": "}"
                },
                {
                    "line_number": 565,
                    "text": ").then(function (response) {"
                },
                {
                    "line_number": 566,
                    "text": "if (response.ok) {"
                },
                {
                    "line_number": 567,
                    "text": "response.json().then(function (responseJson) {"
                },
                {
                    "line_number": 568,
                    "text": "const xRequestId = response.headers.get(\"X-Request-ID\");"
                },
                {
                    "line_number": 569,
                    "text": "console.log(\"Successful request:\\n\" + JSON.stringify(responseJson, null, 4) + ("
                },
                {
                    "line_number": 570,
                    "text": "xRequestId === null"
                },
                {
                    "line_number": 571,
                    "text": "? \"\""
                },
                {
                    "line_number": 572,
                    "text": ": \"\\nX-Request-ID response header: \" + xRequestId"
                },
                {
                    "line_number": 573,
                    "text": "));"
                },
                {
                    "line_number": 574,
                    "text": "});"
                },
                {
                    "line_number": 575,
                    "text": "} else {"
                },
                {
                    "line_number": 576,
                    "text": "// If you get a 404 NotFound, the order might already be executed!"
                },
                {
                    "line_number": 577,
                    "text": "demo.processError(response);"
                },
                {
                    "line_number": 578,
                    "text": "}"
                },
                {
                    "line_number": 579,
                    "text": "}).catch(function (error) {"
                },
                {
                    "line_number": 580,
                    "text": "console.error(error);"
                },
                {
                    "line_number": 581,
                    "text": "});"
                },
                {
                    "line_number": 582,
                    "text": "}"
                },
                {
                    "line_number": 583,
                    "text": ""
                },
                {
                    "line_number": 584,
                    "text": "/**"
                },
                {
                    "line_number": 585,
                    "text": "* This is an example of removing an order from the book."
                },
                {
                    "line_number": 586,
                    "text": "* @return {void}"
                },
                {
                    "line_number": 587,
                    "text": "*/"
                },
                {
                    "line_number": 588,
                    "text": "function cancelLastOrder() {"
                },
                {
                    "line_number": 589,
                    "text": "fetch("
                },
                {
                    "line_number": 590,
                    "text": "demo.apiUrl + \"/trade/v2/orders/\" + lastOrderId + \"?AccountKey=\" + encodeURIComponent(demo.user.accountKey),"
                },
                {
                    "line_number": 591,
                    "text": "{"
                },
                {
                    "line_number": 592,
                    "text": "\"method\": \"DELETE\","
                },
                {
                    "line_number": 593,
                    "text": "\"headers\": {"
                },
                {
                    "line_number": 594,
                    "text": "\"Authorization\": \"Bearer \" + document.getElementById(\"idBearerToken\").value"
                },
                {
                    "line_number": 595,
                    "text": "}"
                },
                {
                    "line_number": 596,
                    "text": "}"
                },
                {
                    "line_number": 597,
                    "text": ").then(function (response) {"
                },
                {
                    "line_number": 598,
                    "text": "if (response.ok) {"
                },
                {
                    "line_number": 599,
                    "text": "response.json().then(function (responseJson) {"
                },
                {
                    "line_number": 600,
                    "text": "// Response must have an OrderId"
                },
                {
                    "line_number": 601,
                    "text": "console.log(JSON.stringify(responseJson, null, 4));"
                },
                {
                    "line_number": 602,
                    "text": "});"
                },
                {
                    "line_number": 603,
                    "text": "} else {"
                },
                {
                    "line_number": 604,
                    "text": "demo.processError(response);"
                },
                {
                    "line_number": 605,
                    "text": "}"
                },
                {
                    "line_number": 606,
                    "text": "}).catch(function (error) {"
                },
                {
                    "line_number": 607,
                    "text": "console.error(error);"
                },
                {
                    "line_number": 608,
                    "text": "});"
                },
                {
                    "line_number": 609,
                    "text": "}"
                },
                {
                    "line_number": 610,
                    "text": ""
                },
                {
                    "line_number": 611,
                    "text": "demo.setupEvents(["
                },
                {
                    "line_number": 612,
                    "text": "{\"evt\": \"change\", \"elmId\": \"idCbxOrderType\", \"func\": changeOrderType, \"funcsToDisplay\": [changeOrderType, populateSupportedOrderDurations, changeOrderDuration]},"
                },
                {
                    "line_number": 613,
                    "text": "{\"evt\": \"change\", \"elmId\": \"idCbxOrderDuration\", \"func\": changeOrderDuration, \"funcsToDisplay\": [changeOrderDuration]},"
                },
                {
                    "line_number": 614,
                    "text": "{\"evt\": \"click\", \"elmId\": \"idBtnGetSeries\", \"func\": getSeries, \"funcsToDisplay\": [getSeries]},"
                },
                {
                    "line_number": 615,
                    "text": "{\"evt\": \"click\", \"elmId\": \"idBtnGetConditions\", \"func\": getConditions, \"funcsToDisplay\": [getConditions]},"
                },
                {
                    "line_number": 616,
                    "text": "{\"evt\": \"click\", \"elmId\": \"idBtnPreCheckOrder\", \"func\": preCheckNewOrder, \"funcsToDisplay\": [preCheckNewOrder]},"
                },
                {
                    "line_number": 617,
                    "text": "{\"evt\": \"click\", \"elmId\": \"idBtnPlaceNewOrder\", \"func\": placeNewOrder, \"funcsToDisplay\": [placeNewOrder]},"
                },
                {
                    "line_number": 618,
                    "text": "{\"evt\": \"click\", \"elmId\": \"idBtnModifyLastOrder\", \"func\": modifyLastOrder, \"funcsToDisplay\": [modifyLastOrder]},"
                },
                {
                    "line_number": 619,
                    "text": "{\"evt\": \"click\", \"elmId\": \"idBtnCancelLastOrder\", \"func\": cancelLastOrder, \"funcsToDisplay\": [cancelLastOrder]}"
                },
                {
                    "line_number": 620,
                    "text": "]);"
                },
                {
                    "line_number": 621,
                    "text": "demo.displayVersion(\"trade\");"
                },
                {
                    "line_number": 622,
                    "text": "}());"
                }
            ],
            "token_count": 7401
        }
    ]
}